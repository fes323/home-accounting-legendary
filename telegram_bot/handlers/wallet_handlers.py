"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ—à–µ–ª—å–∫–æ–≤.
"""

import asyncio
import logging

from aiogram import F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery, Message

from telegram_bot.keyboards import (currency_selection_keyboard, skip_keyboard,
                                    wallets_keyboard)
from telegram_bot.utils import format_balance

from .base import BaseHandler, ErrorHandler, ResponseFormatter, StateManager
from .states import WalletStates


class WalletHandler(BaseHandler):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ—à–µ–ª—å–∫–æ–≤."""

    def _register_handlers(self):
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ—à–µ–ª—å–∫–æ–≤."""
        # –ö–æ–º–∞–Ω–¥—ã
        self.router.message.register(self.cmd_wallets, Command("wallets"))

        # –ö–Ω–æ–ø–∫–∏ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
        self.router.message.register(self.btn_wallets, F.text == "üí≥ –ö–æ—à–µ–ª—å–∫–∏")

        # FSM —Å–æ—Å—Ç–æ—è–Ω–∏—è
        self.router.message.register(
            self.process_wallet_title, WalletStates.waiting_for_title)
        self.router.message.register(
            self.process_wallet_description, WalletStates.waiting_for_description)

        # Callback –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        self.router.callback_query.register(
            self.callback_create_wallet, F.data == "create_wallet")
        self.router.callback_query.register(
            self.callback_select_currency, F.data.startswith("select_currency_"))
        self.router.callback_query.register(
            self.callback_skip_field, F.data == "skip_field")

    async def cmd_wallets(self, message: Message, django_user, state: FSMContext):
        """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ—à–µ–ª—å–∫–∞–º–∏."""
        from accounting.models.wallet import Wallet

        wallets = await asyncio.to_thread(
            lambda: list(Wallet.objects.filter(
                user=django_user).select_related('currency'))
        )

        text = "üí≥ <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ—à–µ–ª—å–∫–∞–º–∏</b>\n\n"

        if wallets:
            text += "–í–∞—à–∏ –∫–æ—à–µ–ª—å–∫–∏:\n"
            for wallet in wallets:
                text += f"‚Ä¢ {wallet.title} - {format_balance(wallet.balance)} {wallet.currency.char_code}\n"
        else:
            text += "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∫–æ—à–µ–ª—å–∫–æ–≤."

        sent_message = await message.answer(
            text,
            reply_markup=wallets_keyboard()
        )
        await StateManager.save_message_with_keyboard(sent_message, state)

    async def btn_wallets(self, message: Message, django_user, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –∫–æ—à–µ–ª—å–∫–∏."""
        await self.cmd_wallets(message, django_user, state)

    async def callback_create_wallet(self, callback: CallbackQuery, state: FSMContext):
        """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∫–æ—à–µ–ª—å–∫–∞."""
        await StateManager.cleanup_previous_inline_keyboards(callback.message, state)
        await state.set_state(WalletStates.waiting_for_title)
        await callback.message.edit_text(
            "üí≥ <b>–°–æ–∑–¥–∞–Ω–∏–µ –∫–æ—à–µ–ª—å–∫–∞</b>\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ—à–µ–ª—å–∫–∞:",
            reply_markup=None
        )
        await callback.answer()

    async def process_wallet_title(self, message: Message, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–æ—à–µ–ª—å–∫–∞."""
        await state.update_data(title=message.text)
        await state.set_state(WalletStates.waiting_for_description)

        sent_message = await message.answer(
            "üìù –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫–æ—à–µ–ª—å–∫–∞:",
            reply_markup=skip_keyboard()
        )
        await StateManager.save_message_with_keyboard(sent_message, state)

    async def process_wallet_description(self, message: Message, state: FSMContext, django_user):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–ø–∏—Å–∞–Ω–∏—è –∫–æ—à–µ–ª—å–∫–∞."""
        description = message.text if message.text != "-" else ""
        await state.update_data(description=description)
        await state.set_state(WalletStates.waiting_for_currency)

        sent_message = await message.answer(
            "üí± –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É –∫–æ—à–µ–ª—å–∫–∞:",
            reply_markup=currency_selection_keyboard()
        )
        await StateManager.save_message_with_keyboard(sent_message, state)

    async def callback_select_currency(self, callback: CallbackQuery, state: FSMContext, django_user):
        """–í—ã–±–æ—Ä –≤–∞–ª—é—Ç—ã –¥–ª—è –∫–æ—à–µ–ª—å–∫–∞."""
        currency_code = callback.data.split("_")[-1]

        from accounting.models.currencyCBR import CurrencyCBR
        from accounting.models.wallet import Wallet

        try:
            currency = await asyncio.to_thread(
                CurrencyCBR.objects.get, char_code=currency_code
            )

            data = await state.get_data()

            # –°–æ–∑–¥–∞–µ–º –∫–æ—à–µ–ª–µ–∫
            wallet = await asyncio.to_thread(
                lambda: Wallet.objects.create(
                    user=django_user,
                    title=data['title'],
                    description=data['description'],
                    currency=currency
                )
            )

            # –ü–æ–ª—É—á–∞–µ–º –∫–æ—à–µ–ª–µ–∫ —Å –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–π –≤–∞–ª—é—Ç–æ–π –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            wallet = await asyncio.to_thread(
                Wallet.objects.select_related('currency').get, uuid=wallet.uuid
            )

            await StateManager.cleanup_previous_inline_keyboards(callback.message, state)
            await callback.message.edit_text(
                ResponseFormatter.format_success_message(
                    "–ö–æ—à–µ–ª–µ–∫ —Å–æ–∑–¥–∞–Ω!",
                    [
                        f"üí≥ {wallet.title}",
                        f"üí∞ –ë–∞–ª–∞–Ω—Å: {format_balance(wallet.balance)} {wallet.currency.char_code}",
                        f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {wallet.description or '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è'}"
                    ]
                ),
                reply_markup=None
            )

            await state.clear()
            await callback.answer("–ö–æ—à–µ–ª–µ–∫ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!")

        except Exception as e:
            await StateManager.cleanup_previous_inline_keyboards(callback.message, state)
            await callback.message.edit_text(
                ErrorHandler.handle_database_error(e, "—Å–æ–∑–¥–∞–Ω–∏–µ –∫–æ—à–µ–ª—å–∫–∞"),
                reply_markup=None
            )
            await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

    async def callback_skip_field(self, callback: CallbackQuery, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å."""
        current_state = await state.get_state()

        if current_state == WalletStates.waiting_for_description:
            await state.update_data(description="")
            await state.set_state(WalletStates.waiting_for_currency)
            await StateManager.cleanup_previous_inline_keyboards(callback.message, state)
            await callback.message.edit_text(
                "üí± –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É –∫–æ—à–µ–ª—å–∫–∞:",
                reply_markup=currency_selection_keyboard()
            )

        await callback.answer()
