"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π.
"""

import asyncio
import logging

from aiogram import F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery, Message

from telegram_bot.keyboards import (categories_keyboard,
                                    category_parent_selection_keyboard,
                                    paginated_categories_keyboard,
                                    paginated_category_selection_keyboard,
                                    skip_keyboard)

from .base import BaseHandler, ErrorHandler, ResponseFormatter, StateManager
from .states import CategoryStates


class CategoryHandler(BaseHandler):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π."""

    def _register_handlers(self):
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–π."""
        # –ö–æ–º–∞–Ω–¥—ã
        self.router.message.register(
            self.cmd_categories, Command("categories"))

        # –ö–Ω–æ–ø–∫–∏ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
        self.router.message.register(
            self.btn_categories, F.text == "üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏")

        # FSM —Å–æ—Å—Ç–æ—è–Ω–∏—è
        self.router.message.register(
            self.process_category_title, CategoryStates.waiting_for_title)
        self.router.message.register(
            self.process_category_description, CategoryStates.waiting_for_description)

        # Callback –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        self.router.callback_query.register(
            self.callback_create_category, F.data == "create_category")
        self.router.callback_query.register(
            self.callback_create_root_category, F.data == "create_root_category")
        self.router.callback_query.register(
            self.callback_select_parent_category, F.data.startswith("select_category_parent_"))
        self.router.callback_query.register(
            self.callback_cancel_category, F.data == "cancel_category")
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
        self.router.callback_query.register(
            self.callback_categories_page, F.data.startswith("categories_page_"))
        self.router.callback_query.register(
            self.callback_category_select_page, F.data.startswith("category_select_page_"))

    async def cmd_categories(self, message: Message, django_user, state: FSMContext):
        """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏."""
        from accounting.models.transactionCategory import \
            TransactionCategoryTree

        categories = await asyncio.to_thread(
            lambda: list(
                TransactionCategoryTree.objects.filter(user=django_user))
        )

        text = "üìÇ <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏</b>\n\n"

        if categories:
            text += f"–í—Å–µ–≥–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {len(categories)}\n"
            text += "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
        else:
            text += "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–π."

        sent_message = await message.answer(
            text,
            reply_markup=categories_keyboard()
        )
        await StateManager.save_message_with_keyboard(sent_message, state)

    async def btn_categories(self, message: Message, django_user, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏."""
        await self.cmd_categories(message, django_user, state)

    async def callback_create_category(self, callback: CallbackQuery, state: FSMContext):
        """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏."""
        self.logger.info("Starting category creation process")
        await StateManager.cleanup_previous_inline_keyboards(callback.message, state)
        await state.set_state(CategoryStates.waiting_for_title)
        await callback.message.edit_text(
            "üìÇ <b>–°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏</b>\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:",
            reply_markup=None
        )
        await callback.answer()

    async def process_category_title(self, message: Message, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏."""
        self.logger.info(f"Processing category title: {message.text}")
        await state.update_data(title=message.text)
        await state.set_state(CategoryStates.waiting_for_description)

        sent_message = await message.answer(
            "üìù –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:",
            reply_markup=skip_keyboard()
        )
        await StateManager.save_message_with_keyboard(sent_message, state)

    async def process_category_description(self, message: Message, state: FSMContext, django_user):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–ø–∏—Å–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏."""
        description = message.text if message.text != "-" else ""
        self.logger.info(f"Processing category description: {description}")
        await state.update_data(description=description)

        # –ü–æ–ª—É—á–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–π
        from accounting.models.transactionCategory import \
            TransactionCategoryTree
        categories = await asyncio.to_thread(
            lambda: list(
                TransactionCategoryTree.objects.filter(user=django_user))
        )

        self.logger.info(
            f"Found {len(categories)} existing categories for user {django_user}")

        if categories:
            await state.set_state(CategoryStates.waiting_for_parent)
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
            await state.update_data(all_categories=categories, current_page=0)
            sent_message = await message.answer(
                "üìÇ –í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
                reply_markup=paginated_categories_keyboard(categories, page=0)
            )
            await StateManager.save_message_with_keyboard(sent_message, state)
        else:
            # –°–æ–∑–¥–∞–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
            self.logger.info("No existing categories, creating root category")
            await self._create_category(state, django_user, None)
            await message.answer("‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è —Å–æ–∑–¥–∞–Ω–∞!")
            await state.clear()

    async def callback_create_root_category(self, callback: CallbackQuery, state: FSMContext, django_user):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∫–æ—Ä–Ω–µ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏."""
        try:
            await self._create_category(state, django_user, None)
            await StateManager.cleanup_previous_inline_keyboards(callback.message, state)
            await callback.message.edit_text("‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è —Å–æ–∑–¥–∞–Ω–∞!", reply_markup=None)
            await state.clear()
            await callback.answer("–ö–∞—Ç–µ–≥–æ—Ä–∏—è —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!")
        except Exception as e:
            self.logger.error(
                f"Error in callback_create_root_category: {str(e)}")
            await StateManager.cleanup_previous_inline_keyboards(callback.message, state)

            # –ë–æ–ª–µ–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
            if "already exists" in str(e) or "unique constraint" in str(e).lower():
                error_msg = "‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏—è —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
            else:
                error_msg = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {str(e)}"

            await callback.message.edit_text(error_msg, reply_markup=None)
            await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

    async def callback_select_parent_category(self, callback: CallbackQuery, state: FSMContext, django_user):
        """–í—ã–±–æ—Ä —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏."""
        category_uuid = callback.data.split("_")[-1]

        self.logger.info(
            f"Selecting parent category with UUID: {category_uuid}")

        from accounting.models.transactionCategory import \
            TransactionCategoryTree

        try:
            parent_category = await asyncio.to_thread(
                TransactionCategoryTree.objects.get, uuid=category_uuid, user=django_user
            )

            self.logger.info(f"Found parent category: {parent_category}")

            await self._create_category(state, django_user, parent_category)

            await StateManager.cleanup_previous_inline_keyboards(callback.message, state)
            await callback.message.edit_text("‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è —Å–æ–∑–¥–∞–Ω–∞!", reply_markup=None)
            await state.clear()
            await callback.answer("–ö–∞—Ç–µ–≥–æ—Ä–∏—è —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!")

        except Exception as e:
            self.logger.error(
                f"Error in callback_select_parent_category: {str(e)}")
            await StateManager.cleanup_previous_inline_keyboards(callback.message, state)

            # –ë–æ–ª–µ–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
            if "already exists" in str(e) or "unique constraint" in str(e).lower():
                error_msg = "‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏—è —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –¥–∞–Ω–Ω–æ–π —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"
            elif "not found" in str(e).lower():
                error_msg = "‚ùå –†–æ–¥–∏—Ç–µ–ª—å—Å–∫–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
            else:
                error_msg = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {str(e)}"

            await callback.message.edit_text(error_msg, reply_markup=None)
            await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

    async def callback_cancel_category(self, callback: CallbackQuery, state: FSMContext):
        """–û—Ç–º–µ–Ω–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏."""
        await StateManager.cleanup_previous_inline_keyboards(callback.message, state)
        await state.clear()
        await callback.message.edit_text("‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=None)
        await callback.answer("–°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ")

    async def _create_category(self, state: FSMContext, django_user, parent_category):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏."""
        from accounting.models.transactionCategory import \
            TransactionCategoryTree

        data = await state.get_data()

        # –õ–æ–≥–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        self.logger.info(f"Creating category with data: {data}")
        self.logger.info(f"Parent category: {parent_category}")
        self.logger.info(f"Django user: {django_user}")

        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å –Ω–∞–∑–≤–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            existing_category = await asyncio.to_thread(
                lambda: TransactionCategoryTree.objects.filter(
                    user=django_user,
                    title=data['title'],
                    parent=parent_category
                ).first()
            )

            if existing_category:
                self.logger.warning(
                    f"Category with title '{data['title']}' already exists for user {django_user}")
                raise ValueError(
                    f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º '{data['title']}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")

            category = await asyncio.to_thread(
                lambda: TransactionCategoryTree.objects.create(
                    user=django_user,
                    parent=parent_category,
                    title=data['title'],
                    description=data['description']
                )
            )
            self.logger.info(f"Category created successfully: {category}")
            return category
        except Exception as e:
            self.logger.error(f"Error creating category: {str(e)}")
            raise

    async def callback_categories_page(self, callback: CallbackQuery, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π."""
        try:
            page = int(callback.data.split("_")[-1])
            data = await state.get_data()
            categories = data.get('all_categories', [])

            if not categories:
                await callback.answer("–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                return

            await StateManager.cleanup_previous_inline_keyboards(callback.message, state)
            await callback.message.edit_text(
                "üìÇ –í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
                reply_markup=paginated_categories_keyboard(
                    categories, page=page)
            )
            await state.update_data(current_page=page)
            await callback.answer()

        except Exception as e:
            self.logger.error(f"Error in callback_categories_page: {str(e)}")
            await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã")

    async def callback_category_select_page(self, callback: CallbackQuery, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏."""
        try:
            page = int(callback.data.split("_")[-1])
            data = await state.get_data()
            categories = data.get('all_categories', [])

            if not categories:
                await callback.answer("–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                return

            await StateManager.cleanup_previous_inline_keyboards(callback.message, state)
            await callback.message.edit_text(
                "üìÇ –í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
                reply_markup=paginated_categories_keyboard(
                    categories, page=page)
            )
            await state.update_data(current_page=page)
            await callback.answer()

        except Exception as e:
            self.logger.error(
                f"Error in callback_category_select_page: {str(e)}")
            await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã")
