"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π (–¥–æ—Ö–æ–¥—ã –∏ —Ä–∞—Å—Ö–æ–¥—ã).
"""

import asyncio
import logging
from decimal import Decimal

from aiogram import F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery, Message

from telegram_bot.keyboards import (category_selection_keyboard,
                                    paginated_category_selection_keyboard,
                                    skip_keyboard, transaction_type_keyboard,
                                    wallet_selection_keyboard)
from telegram_bot.utils import validate_amount

from .base import BaseHandler, ErrorHandler, ResponseFormatter, StateManager
from .states import TransactionCategoryStates, TransactionStates


class TransactionHandler(BaseHandler):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π."""

    def _register_handlers(self):
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π."""
        # –ö–æ–º–∞–Ω–¥—ã
        self.router.message.register(self.cmd_income, Command("income"))
        self.router.message.register(self.cmd_expense, Command("expense"))

        # –ö–Ω–æ–ø–∫–∏ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
        self.router.message.register(self.btn_income, F.text == "‚ûï –î–æ—Ö–æ–¥")
        self.router.message.register(self.btn_expense, F.text == "‚ûñ –†–∞—Å—Ö–æ–¥")

        # FSM —Å–æ—Å—Ç–æ—è–Ω–∏—è
        self.router.message.register(
            self.process_amount, TransactionStates.waiting_for_amount)
        self.router.message.register(
            self.process_description, TransactionStates.waiting_for_description)

        # FSM —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤–æ –≤—Ä–µ–º—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        self.router.message.register(
            self.process_transaction_category_title, TransactionCategoryStates.waiting_for_title)
        self.router.message.register(
            self.process_transaction_category_description, TransactionCategoryStates.waiting_for_description)

        # Callback –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        self.router.callback_query.register(
            self.callback_select_wallet, F.data.startswith("select_wallet_"))
        self.router.callback_query.register(
            self.callback_select_category, F.data.startswith("select_category_"))
        self.router.callback_query.register(
            self.callback_no_category, F.data == "no_category")
        self.router.callback_query.register(
            self.callback_create_new_category, F.data == "create_new_category")
        self.router.callback_query.register(
            self.callback_cancel_transaction, F.data == "cancel_transaction")

        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤–æ –≤—Ä–µ–º—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        self.router.callback_query.register(
            self.callback_create_transaction_category_root, F.data == "ctcr")
        self.router.callback_query.register(
            self.callback_select_transaction_category_parent, F.data.startswith("tcp_"))
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        self.router.callback_query.register(
            self.callback_category_select_page, F.data.startswith("category_select_page_"))

    async def cmd_income(self, message: Message, state: FSMContext):
        """–î–æ–±–∞–≤–∏—Ç—å –¥–æ—Ö–æ–¥."""
        await state.set_state(TransactionStates.waiting_for_amount)
        await state.update_data(transaction_type="IN")

        sent_message = await message.answer(
            "üí∞ <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–æ—Ö–æ–¥–∞</b>\n\n"
            "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–æ—Ö–æ–¥–∞:",
            reply_markup=transaction_type_keyboard()
        )
        await StateManager.save_message_with_keyboard(sent_message, state)

    async def cmd_expense(self, message: Message, state: FSMContext):
        """–î–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—Ö–æ–¥."""
        await state.set_state(TransactionStates.waiting_for_amount)
        await state.update_data(transaction_type="EX")

        sent_message = await message.answer(
            "üí∏ <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å—Ö–æ–¥–∞</b>\n\n"
            "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Ä–∞—Å—Ö–æ–¥–∞:",
            reply_markup=transaction_type_keyboard()
        )
        await StateManager.save_message_with_keyboard(sent_message, state)

    async def btn_income(self, message: Message, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –¥–æ—Ö–æ–¥."""
        await self.cmd_income(message, state)

    async def btn_expense(self, message: Message, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ —Ä–∞—Å—Ö–æ–¥."""
        await self.cmd_expense(message, state)

    async def process_amount(self, message: Message, state: FSMContext, django_user):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω–æ–π —Å—É–º–º—ã."""
        amount = validate_amount(message.text)

        if amount is None:
            await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—É–º–º—ã! –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ.")
            return

        await state.update_data(amount=amount)
        await state.set_state(TransactionStates.waiting_for_description)

        sent_message = await message.answer(
            "üìù –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:",
            reply_markup=transaction_type_keyboard()
        )
        await StateManager.save_message_with_keyboard(sent_message, state)

    async def process_description(self, message: Message, state: FSMContext, django_user):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–ø–∏—Å–∞–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏."""
        await state.update_data(description=message.text)
        await state.set_state(TransactionStates.waiting_for_wallet)

        from accounting.models.wallet import Wallet

        wallets = await asyncio.to_thread(
            lambda: list(Wallet.objects.filter(
                user=django_user).select_related('currency'))
        )

        if not wallets:
            await message.answer(
                "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∫–æ—à–µ–ª—å–∫–æ–≤! –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –∫–æ—à–µ–ª–µ–∫ –∫–æ–º–∞–Ω–¥–æ–π /wallets"
            )
            await state.clear()
            return

        text = "üí≥ –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ—à–µ–ª–µ–∫ –¥–ª—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:"
        sent_message = await message.answer(text, reply_markup=wallet_selection_keyboard(wallets))
        await StateManager.save_message_with_keyboard(sent_message, state)

    async def callback_select_wallet(self, callback: CallbackQuery, state: FSMContext, django_user):
        """–í—ã–±–æ—Ä –∫–æ—à–µ–ª—å–∫–∞ –¥–ª—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏."""
        wallet_uuid = callback.data.split("_")[-1]

        from accounting.models.wallet import Wallet

        try:
            wallet = await asyncio.to_thread(
                Wallet.objects.select_related(
                    'currency').get, uuid=wallet_uuid, user=django_user
            )

            data = await state.get_data()
            data['wallet_uuid'] = wallet_uuid
            await state.update_data(wallet_uuid=wallet_uuid)

            # –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            from accounting.models.transactionCategory import \
                TransactionCategoryTree
            categories = await asyncio.to_thread(
                lambda: list(
                    TransactionCategoryTree.objects.filter(user=django_user))
            )

            if categories:
                await StateManager.cleanup_previous_inline_keyboards(callback.message, state)
                await state.set_state(TransactionStates.waiting_for_category)
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
                await state.update_data(all_categories=categories, current_page=0)
                await callback.message.edit_text(
                    f"üìÇ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:",
                    reply_markup=paginated_category_selection_keyboard(
                        categories, page=0)
                )
            else:
                # –°–æ–∑–¥–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –±–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                transaction, updated_wallet = await self._create_transaction(state, django_user, wallet, None)

                # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
                updated_data = await state.get_data()
                await StateManager.cleanup_previous_inline_keyboards(callback.message, state)
                await callback.message.edit_text(
                    ResponseFormatter.format_success_message(
                        "–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∞!",
                        [
                            f"üí∞ –°—É–º–º–∞: {updated_data['amount']} {updated_wallet.currency.char_code}",
                            f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {updated_data['description']}",
                            f"üí≥ –ö–æ—à–µ–ª–µ–∫: {updated_wallet.title}"
                        ]
                    ),
                    reply_markup=None
                )
                await state.clear()

            await callback.answer()

        except Exception as e:
            await StateManager.cleanup_previous_inline_keyboards(callback.message, state)
            await callback.message.edit_text(
                ErrorHandler.handle_database_error(e, "–≤—ã–±–æ—Ä –∫–æ—à–µ–ª—å–∫–∞"),
                reply_markup=None
            )
            await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

    async def callback_select_category(self, callback: CallbackQuery, state: FSMContext, django_user):
        """–í—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏."""
        category_uuid = callback.data.split("_")[-1]

        from accounting.models.transactionCategory import \
            TransactionCategoryTree
        from accounting.models.wallet import Wallet

        try:
            category = await asyncio.to_thread(
                TransactionCategoryTree.objects.get, uuid=category_uuid, user=django_user
            )

            data = await state.get_data()

            if 'wallet_uuid' not in data:
                await callback.message.edit_text(
                    "‚ùå –û—à–∏–±–∫–∞: –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ—à–µ–ª—å–∫–µ –ø–æ—Ç–µ—Ä—è–Ω–∞. –ù–∞—á–Ω–∏—Ç–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –∑–∞–Ω–æ–≤–æ.",
                    reply_markup=None
                )
                await state.clear()
                await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
                return

            wallet = await asyncio.to_thread(
                Wallet.objects.select_related(
                    'currency').get, uuid=data['wallet_uuid'], user=django_user
            )

            transaction, updated_wallet = await self._create_transaction(state, django_user, wallet, category)

            await StateManager.cleanup_previous_inline_keyboards(callback.message, state)
            await callback.message.edit_text(
                ResponseFormatter.format_success_message(
                    "–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∞!",
                    [
                        f"üí∞ –°—É–º–º–∞: {data['amount']} {updated_wallet.currency.char_code}",
                        f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {data['description']}",
                        f"üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category.title}",
                        f"üí≥ –ö–æ—à–µ–ª–µ–∫: {updated_wallet.title}"
                    ]
                ),
                reply_markup=None
            )

            await state.clear()
            await callback.answer("–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!")

        except Exception as e:
            await StateManager.cleanup_previous_inline_keyboards(callback.message, state)
            await callback.message.edit_text(
                ErrorHandler.handle_database_error(e, "–≤—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"),
                reply_markup=None
            )
            await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

    async def callback_no_category(self, callback: CallbackQuery, state: FSMContext, django_user):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –±–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏."""
        from accounting.models.wallet import Wallet

        try:
            data = await state.get_data()

            if 'wallet_uuid' not in data:
                await callback.message.edit_text(
                    "‚ùå –û—à–∏–±–∫–∞: –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ—à–µ–ª—å–∫–µ –ø–æ—Ç–µ—Ä—è–Ω–∞. –ù–∞—á–Ω–∏—Ç–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –∑–∞–Ω–æ–≤–æ.",
                    reply_markup=None
                )
                await state.clear()
                await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
                return

            wallet = await asyncio.to_thread(
                Wallet.objects.select_related(
                    'currency').get, uuid=data['wallet_uuid'], user=django_user
            )

            transaction, updated_wallet = await self._create_transaction(state, django_user, wallet, None)

            await StateManager.cleanup_previous_inline_keyboards(callback.message, state)
            await callback.message.edit_text(
                ResponseFormatter.format_success_message(
                    "–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∞!",
                    [
                        f"üí∞ –°—É–º–º–∞: {data['amount']} {updated_wallet.currency.char_code}",
                        f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {data['description']}",
                        f"üí≥ –ö–æ—à–µ–ª–µ–∫: {updated_wallet.title}"
                    ]
                ),
                reply_markup=None
            )

            await state.clear()
            await callback.answer("–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!")

        except Exception as e:
            await callback.message.edit_text(
                ErrorHandler.handle_database_error(e, "—Å–æ–∑–¥–∞–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏"),
                reply_markup=None
            )
            await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

    async def callback_cancel_transaction(self, callback: CallbackQuery, state: FSMContext):
        """–û—Ç–º–µ–Ω–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏."""
        await StateManager.cleanup_previous_inline_keyboards(callback.message, state)
        await state.clear()
        await callback.message.edit_text("‚ùå –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞", reply_markup=None)
        await callback.answer("–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")

    async def _create_transaction(self, state: FSMContext, django_user, wallet, category):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏."""
        from django.db.models import Sum

        from accounting.models.transaction import Transaction
        from accounting.models.wallet import Wallet

        data = await state.get_data()

        # –õ–æ–≥–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        self.logger.info(f"Creating transaction: user={django_user.username}, wallet={wallet.title}, "
                         f"type={data['transaction_type']}, amount={data['amount']}, "
                         f"description={data['description']}")

        transaction = await asyncio.to_thread(
            lambda: Transaction.objects.create(
                user=django_user,
                wallet=wallet,
                category=category,
                t_type=data['transaction_type'],
                amount=Decimal(str(data['amount'])),
                description=data['description']
            )
        )

        # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –∫–æ—à–µ–ª—å–∫–∞
        await asyncio.to_thread(
            lambda: wallet.refresh_from_db()
        )

        # –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –±–∞–ª–∞–Ω—Å –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—Å–µ—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
        total_income = await asyncio.to_thread(
            lambda: Transaction.objects.filter(wallet=wallet, t_type='IN').aggregate(
                total=Sum('amount'))['total'] or Decimal('0')
        )
        total_expense = await asyncio.to_thread(
            lambda: Transaction.objects.filter(wallet=wallet, t_type='EX').aggregate(
                total=Sum('amount'))['total'] or Decimal('0')
        )

        new_balance = total_income - total_expense
        await asyncio.to_thread(
            lambda: Wallet.objects.filter(
                uuid=wallet.uuid).update(balance=new_balance)
        )

        # –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—ä–µ–∫—Ç –∫–æ—à–µ–ª—å–∫–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        wallet = await asyncio.to_thread(
            Wallet.objects.select_related('currency').get, uuid=wallet.uuid
        )

        # –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        self.logger.info(
            f"Transaction created: {transaction.uuid}, wallet balance after: {wallet.balance}")

        return transaction, wallet

    async def callback_create_new_category(self, callback: CallbackQuery, state: FSMContext, django_user):
        """–ù–∞—á–∞–ª–æ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤–æ –≤—Ä–µ–º—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏."""
        try:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
            data = await state.get_data()
            await state.update_data(
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
                transaction_amount=data.get('amount'),
                transaction_description=data.get('description'),
                transaction_type=data.get('transaction_type'),
                transaction_wallet_uuid=data.get('wallet_uuid'),
                # –§–ª–∞–≥ —á—Ç–æ –º—ã —Å–æ–∑–¥–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
                creating_category_for_transaction=True
            )

            await StateManager.cleanup_previous_inline_keyboards(callback.message, state)
            await state.set_state(TransactionCategoryStates.waiting_for_title)

            await callback.message.edit_text(
                "üìÇ <b>–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏</b>\n\n"
                "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:",
                reply_markup=None
            )
            await callback.answer()

        except Exception as e:
            await StateManager.cleanup_previous_inline_keyboards(callback.message, state)
            await callback.message.edit_text(
                ErrorHandler.handle_database_error(e, "—Å–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"),
                reply_markup=None
            )
            await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

    async def process_transaction_category_title(self, message: Message, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏."""
        await state.update_data(category_title=message.text)
        await state.set_state(TransactionCategoryStates.waiting_for_description)

        sent_message = await message.answer(
            "üìù –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:",
            reply_markup=skip_keyboard()
        )
        await StateManager.save_message_with_keyboard(sent_message, state)

    async def process_transaction_category_description(self, message: Message, state: FSMContext, django_user):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–ø–∏—Å–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏."""
        description = message.text if message.text != "-" else ""
        await state.update_data(category_description=description)

        # –ü–æ–ª—É—á–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–π
        from accounting.models.transactionCategory import \
            TransactionCategoryTree
        categories = await asyncio.to_thread(
            lambda: list(
                TransactionCategoryTree.objects.filter(user=django_user))
        )

        if categories:
            await state.set_state(TransactionCategoryStates.waiting_for_parent)
            sent_message = await message.answer(
                "üìÇ –í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
                reply_markup=self._transaction_category_parent_keyboard(
                    categories)
            )
            await StateManager.save_message_with_keyboard(sent_message, state)
        else:
            # –°–æ–∑–¥–∞–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
            await self._create_transaction_category(state, django_user, None, message)

    async def callback_create_transaction_category_root(self, callback: CallbackQuery, state: FSMContext, django_user):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∫–æ—Ä–Ω–µ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏."""
        try:
            await self._create_transaction_category(state, django_user, None, callback.message)
            await callback.answer("–ö–∞—Ç–µ–≥–æ—Ä–∏—è —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!")
        except Exception as e:
            await StateManager.cleanup_previous_inline_keyboards(callback.message, state)
            await callback.message.edit_text(
                ErrorHandler.handle_database_error(e, "—Å–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"),
                reply_markup=None
            )
            await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

    async def callback_select_transaction_category_parent(self, callback: CallbackQuery, state: FSMContext, django_user):
        """–í—ã–±–æ—Ä —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏."""
        category_uuid = callback.data.split("_")[1]  # tcp_uuid -> uuid

        from accounting.models.transactionCategory import \
            TransactionCategoryTree

        try:
            parent_category = await asyncio.to_thread(
                TransactionCategoryTree.objects.get, uuid=category_uuid, user=django_user
            )

            await self._create_transaction_category(state, django_user, parent_category, callback.message)
            await callback.answer("–ö–∞—Ç–µ–≥–æ—Ä–∏—è —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!")

        except Exception as e:
            await StateManager.cleanup_previous_inline_keyboards(callback.message, state)
            await callback.message.edit_text(
                ErrorHandler.handle_database_error(
                    e, "–≤—ã–±–æ—Ä —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"),
                reply_markup=None
            )
            await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

    async def _create_transaction_category(self, state: FSMContext, django_user, parent_category, message_or_callback):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏."""
        from accounting.models.transactionCategory import \
            TransactionCategoryTree

        data = await state.get_data()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å –Ω–∞–∑–≤–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        existing_category = await asyncio.to_thread(
            lambda: TransactionCategoryTree.objects.filter(
                user=django_user,
                title=data['category_title'],
                parent=parent_category
            ).first()
        )

        if existing_category:
            error_msg = f"‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏—è —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º '{data['category_title']}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
            if hasattr(message_or_callback, 'edit_text'):
                await message_or_callback.edit_text(error_msg, reply_markup=None)
            else:
                await message_or_callback.answer(error_msg)
            return

        # –°–æ–∑–¥–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é
        category = await asyncio.to_thread(
            lambda: TransactionCategoryTree.objects.create(
                user=django_user,
                parent=parent_category,
                title=data['category_title'],
                description=data['category_description']
            )
        )

        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        await state.update_data(
            amount=data['transaction_amount'],
            description=data['transaction_description'],
            transaction_type=data['transaction_type'],
            wallet_uuid=data['transaction_wallet_uuid']
        )

        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–æ—Å—Ç–æ—è–Ω–∏—é –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ —Å—Ä–∞–∑—É –≤—ã–±–∏—Ä–∞–µ–º —Å–æ–∑–¥–∞–Ω–Ω—É—é
        await state.set_state(TransactionStates.waiting_for_category)

        # –ü–æ–ª—É—á–∞–µ–º –∫–æ—à–µ–ª–µ–∫
        from accounting.models.wallet import Wallet
        wallet = await asyncio.to_thread(
            Wallet.objects.select_related('currency').get,
            uuid=data['transaction_wallet_uuid'],
            user=django_user
        )

        # –°–æ–∑–¥–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é —Å –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–µ–π
        transaction, updated_wallet = await self._create_transaction(state, django_user, wallet, category)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
        success_message = ResponseFormatter.format_success_message(
            "–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∞!",
            [
                f"üí∞ –°—É–º–º–∞: {data['transaction_amount']} {updated_wallet.currency.char_code}",
                f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {data['transaction_description']}",
                f"üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category.title}",
                f"üí≥ –ö–æ—à–µ–ª–µ–∫: {updated_wallet.title}"
            ]
        )

        if hasattr(message_or_callback, 'edit_text'):
            await StateManager.cleanup_previous_inline_keyboards(message_or_callback, state)
            await message_or_callback.edit_text(success_message, reply_markup=None)
        else:
            await message_or_callback.answer(success_message)

        await state.clear()

    def _transaction_category_parent_keyboard(self, categories):
        """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤–æ –≤—Ä–µ–º—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏."""
        from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
        from aiogram.utils.keyboard import InlineKeyboardBuilder

        builder = InlineKeyboardBuilder()

        for category in categories:
            indent = "  " * category.level
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–æ–ª–µ–µ –∫–æ—Ä–æ—Ç–∫–∏–π callback_data
            builder.add(InlineKeyboardButton(
                text=f"{indent}{category.title}",
                callback_data=f"tcp_{category.uuid}"
            ))

        builder.add(InlineKeyboardButton(
            text="‚è≠Ô∏è –°–æ–∑–¥–∞—Ç—å –∫–æ—Ä–Ω–µ–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é",
            callback_data="ctcr"
        ))
        builder.add(InlineKeyboardButton(
            text="‚ùå –û—Ç–º–µ–Ω–∞",
            callback_data="cancel_transaction"
        ))

        builder.adjust(1)
        return builder.as_markup()

    async def callback_category_select_page(self, callback: CallbackQuery, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏."""
        try:
            page = int(callback.data.split("_")[-1])
            data = await state.get_data()
            categories = data.get('all_categories', [])

            if not categories:
                await callback.answer("–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                return

            await StateManager.cleanup_previous_inline_keyboards(callback.message, state)
            await callback.message.edit_text(
                f"üìÇ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:",
                reply_markup=paginated_category_selection_keyboard(
                    categories, page=page)
            )
            await state.update_data(current_page=page)
            await callback.answer()

        except Exception as e:
            self.logger.error(
                f"Error in callback_category_select_page: {str(e)}")
            await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã")
