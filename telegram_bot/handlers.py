import asyncio

from aiogram import F, Router
from aiogram.filters import Command, CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import CallbackQuery, Message

from telegram_bot.keyboards import (categories_keyboard, main_menu_keyboard,
                                    transaction_type_keyboard,
                                    wallets_keyboard)
from telegram_bot.utils import format_balance, format_transaction

# –°–æ–∑–¥–∞–Ω–∏–µ —Ä–æ—É—Ç–µ—Ä–∞
router = Router()

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è FSM


class TransactionStates(StatesGroup):
    waiting_for_amount = State()
    waiting_for_description = State()
    waiting_for_category = State()
    waiting_for_wallet = State()


@router.message(CommandStart())
async def cmd_start(message: Message, django_user, is_new_user: bool):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    if is_new_user:
        text = f"üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –≤–∞—à –ª–∏—á–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ —É—á–µ—Ç—É —Ñ–∏–Ω–∞–Ω—Å–æ–≤!\n\n"
        text += f"–Ø –ø–æ–º–æ–≥—É –≤–∞–º:\n"
        text += f"‚Ä¢ üìä –û—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –¥–æ—Ö–æ–¥—ã –∏ —Ä–∞—Å—Ö–æ–¥—ã\n"
        text += f"‚Ä¢ üí∞ –£–ø—Ä–∞–≤–ª—è—Ç—å –∫–æ—à–µ–ª—å–∫–∞–º–∏\n"
        text += f"‚Ä¢ üìà –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ç—Ä–∞—Ç—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º\n"
        text += f"‚Ä¢ üë®‚Äçüë©‚Äçüëß‚Äçüë¶ –í–µ—Å—Ç–∏ —Å–µ–º–µ–π–Ω—ã–π –±—é–¥–∂–µ—Ç\n\n"
        text += f"–î–ª—è –Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –∫–æ—à–µ–ª–µ–∫ –∫–æ–º–∞–Ω–¥–æ–π /wallets"
    else:
        text = f"üëã –° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, {django_user.first_name}!\n\n"
        text += f"–í–∞—à –æ–±—â–∏–π –±–∞–ª–∞–Ω—Å: {format_balance(django_user.total_balance)}"

    await message.answer(
        text,
        reply_markup=main_menu_keyboard()
    )


@router.message(Command("balance"))
async def cmd_balance(message: Message, django_user):
    """–ü–æ–∫–∞–∑–∞—Ç—å –±–∞–ª–∞–Ω—Å –∫–æ—à–µ–ª—å–∫–æ–≤"""
    from accounting.models.wallet import Wallet

    wallets = await asyncio.to_thread(
        lambda: list(Wallet.objects.filter(user=django_user))
    )

    if not wallets:
        await message.answer(
            "üí≥ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∫–æ—à–µ–ª—å–∫–æ–≤.\n"
            "–°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—ã–π –∫–æ—à–µ–ª–µ–∫ –∫–æ–º–∞–Ω–¥–æ–π /wallets"
        )
        return

    text = f"üí∞ <b>–í–∞—à–∏ –∫–æ—à–µ–ª—å–∫–∏:</b>\n\n"
    total_balance = 0

    for wallet in wallets:
        text += f"üí≥ {wallet.title}\n"
        text += f"   –ë–∞–ª–∞–Ω—Å: {format_balance(wallet.balance)} {wallet.currency.char_code}\n"
        if wallet.description:
            text += f"   –û–ø–∏—Å–∞–Ω–∏–µ: {wallet.description}\n"
        text += "\n"
        total_balance += wallet.balance

    text += f"üìä <b>–û–±—â–∏–π –±–∞–ª–∞–Ω—Å: {format_balance(total_balance)}</b>"

    await message.answer(text)


@router.message(Command("income"))
async def cmd_income(message: Message, state: FSMContext):
    """–î–æ–±–∞–≤–∏—Ç—å –¥–æ—Ö–æ–¥"""
    await state.set_state(TransactionStates.waiting_for_amount)
    await state.update_data(transaction_type="IN")

    await message.answer(
        "üí∞ <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–æ—Ö–æ–¥–∞</b>\n\n"
        "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–æ—Ö–æ–¥–∞:",
        reply_markup=transaction_type_keyboard()
    )


@router.message(Command("expense"))
async def cmd_expense(message: Message, state: FSMContext):
    """–î–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—Ö–æ–¥"""
    await state.set_state(TransactionStates.waiting_for_amount)
    await state.update_data(transaction_type="EX")

    await message.answer(
        "üí∏ <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å—Ö–æ–¥–∞</b>\n\n"
        "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Ä–∞—Å—Ö–æ–¥–∞:",
        reply_markup=transaction_type_keyboard()
    )


@router.message(Command("wallets"))
async def cmd_wallets(message: Message, django_user):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ—à–µ–ª—å–∫–∞–º–∏"""
    from accounting.models.wallet import Wallet

    wallets = await asyncio.to_thread(
        lambda: list(Wallet.objects.filter(user=django_user))
    )

    text = "üí≥ <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ—à–µ–ª—å–∫–∞–º–∏</b>\n\n"

    if wallets:
        text += "–í–∞—à–∏ –∫–æ—à–µ–ª—å–∫–∏:\n"
        for wallet in wallets:
            text += f"‚Ä¢ {wallet.title} - {format_balance(wallet.balance)} {wallet.currency.char_code}\n"
    else:
        text += "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∫–æ—à–µ–ª—å–∫–æ–≤."

    await message.answer(
        text,
        reply_markup=wallets_keyboard()
    )


@router.message(Command("categories"))
async def cmd_categories(message: Message, django_user):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏"""
    from accounting.models.transactionCategory import TransactionCategoryTree

    categories = await asyncio.to_thread(
        lambda: list(TransactionCategoryTree.objects.filter(user=django_user))
    )

    text = "üìÇ <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏</b>\n\n"

    if categories:
        text += "–í–∞—à–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:\n"
        for category in categories:
            indent = "  " * category.level
            text += f"{indent}‚Ä¢ {category.title}\n"
    else:
        text += "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–π."

    await message.answer(
        text,
        reply_markup=categories_keyboard()
    )


@router.message(Command("help"))
async def cmd_help(message: Message):
    """–ü–æ–º–æ—â—å –ø–æ –∫–æ–º–∞–Ω–¥–∞–º"""
    text = "ü§ñ <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n\n"
    text += "/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n"
    text += "/balance - –ü–æ–∫–∞–∑–∞—Ç—å –±–∞–ª–∞–Ω—Å –∫–æ—à–µ–ª—å–∫–æ–≤\n"
    text += "/income - –î–æ–±–∞–≤–∏—Ç—å –¥–æ—Ö–æ–¥\n"
    text += "/expense - –î–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—Ö–æ–¥\n"
    text += "/wallets - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ—à–µ–ª—å–∫–∞–º–∏\n"
    text += "/categories - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏\n"
    text += "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n\n"
    text += "üí° <i>–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ—É–Ω–∫—Ü–∏—è–º</i>"

    await message.answer(text)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ—Å—Ç–æ—è–Ω–∏–π FSM
@router.message(TransactionStates.waiting_for_amount)
async def process_amount(message: Message, state: FSMContext, django_user):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω–æ–π —Å—É–º–º—ã"""
    try:
        amount = float(message.text.replace(',', '.'))
        if amount <= 0:
            await message.answer("‚ùå –°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π!")
            return

        await state.update_data(amount=amount)
        await state.set_state(TransactionStates.waiting_for_description)

        await message.answer(
            "üìù –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:",
            reply_markup=transaction_type_keyboard()
        )

    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—É–º–º—ã! –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")


@router.message(TransactionStates.waiting_for_description)
async def process_description(message: Message, state: FSMContext, django_user):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–ø–∏—Å–∞–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏"""
    await state.update_data(description=message.text)
    await state.set_state(TransactionStates.waiting_for_wallet)

    from accounting.models.wallet import Wallet

    wallets = await asyncio.to_thread(
        lambda: list(Wallet.objects.filter(user=django_user))
    )

    if not wallets:
        await message.answer(
            "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∫–æ—à–µ–ª—å–∫–æ–≤! –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –∫–æ—à–µ–ª–µ–∫ –∫–æ–º–∞–Ω–¥–æ–π /wallets"
        )
        await state.clear()
        return

    text = "üí≥ –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ—à–µ–ª–µ–∫ –¥–ª—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:"
    await message.answer(text, reply_markup=wallets_keyboard())


def register_handlers(dp):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤—Å–µ—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤"""
    dp.include_router(router)
