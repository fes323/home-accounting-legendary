import asyncio
import logging
from decimal import Decimal

from aiogram import F, Router
from aiogram.filters import Command, CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import CallbackQuery, Message

from telegram_bot.keyboards import (categories_keyboard,
                                    category_parent_selection_keyboard,
                                    category_selection_keyboard,
                                    confirmation_keyboard,
                                    currency_selection_keyboard,
                                    main_menu_keyboard, skip_keyboard,
                                    transaction_type_keyboard,
                                    wallet_selection_keyboard,
                                    wallets_keyboard)
from telegram_bot.utils import (format_balance, format_transaction,
                                validate_amount)

# –°–æ–∑–¥–∞–Ω–∏–µ —Ä–æ—É—Ç–µ—Ä–∞
router = Router()


async def cleanup_previous_inline_keyboards(message: Message, state: FSMContext):
    """–£–¥–∞–ª–µ–Ω–∏–µ inline –∫–Ω–æ–ø–æ–∫ –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    data = await state.get_data()
    messages_with_keyboards = data.get('messages_with_keyboards', [])

    for msg_id in messages_with_keyboards:
        try:
            await message.bot.edit_message_reply_markup(
                chat_id=message.chat.id,
                message_id=msg_id,
                reply_markup=None
            )
        except Exception as e:
            logging.warning(
                f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∫–Ω–æ–ø–∫–∏ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è {msg_id}: {e}")

    # –û—á–∏—â–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π —Å –∫–Ω–æ–ø–∫–∞–º–∏
    await state.update_data(messages_with_keyboards=[])


async def save_message_with_keyboard(message: Message, state: FSMContext):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ ID —Å–æ–æ–±—â–µ–Ω–∏—è —Å inline –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è –∫–Ω–æ–ø–æ–∫"""
    data = await state.get_data()
    messages_with_keyboards = data.get('messages_with_keyboards', [])
    messages_with_keyboards.append(message.message_id)
    await state.update_data(messages_with_keyboards=messages_with_keyboards)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è FSM


class TransactionStates(StatesGroup):
    waiting_for_amount = State()
    waiting_for_description = State()
    waiting_for_category = State()
    waiting_for_wallet = State()


class WalletStates(StatesGroup):
    waiting_for_title = State()
    waiting_for_description = State()
    waiting_for_currency = State()


class CategoryStates(StatesGroup):
    waiting_for_title = State()
    waiting_for_description = State()
    waiting_for_parent = State()


@router.message(CommandStart())
async def cmd_start(message: Message, django_user, is_new_user: bool):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    if is_new_user:
        text = f"üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –≤–∞—à –ª–∏—á–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ —É—á–µ—Ç—É —Ñ–∏–Ω–∞–Ω—Å–æ–≤!\n\n"
        text += f"–Ø –ø–æ–º–æ–≥—É –≤–∞–º:\n"
        text += f"‚Ä¢ üìä –û—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –¥–æ—Ö–æ–¥—ã –∏ —Ä–∞—Å—Ö–æ–¥—ã\n"
        text += f"‚Ä¢ üí∞ –£–ø—Ä–∞–≤–ª—è—Ç—å –∫–æ—à–µ–ª—å–∫–∞–º–∏\n"
        text += f"‚Ä¢ üìà –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ç—Ä–∞—Ç—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º\n"
        text += f"‚Ä¢ üë®‚Äçüë©‚Äçüëß‚Äçüë¶ –í–µ—Å—Ç–∏ —Å–µ–º–µ–π–Ω—ã–π –±—é–¥–∂–µ—Ç\n\n"
        text += f"–î–ª—è –Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –∫–æ—à–µ–ª–µ–∫ –∫–æ–º–∞–Ω–¥–æ–π /wallets"
    else:
        text = f"üëã –° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, {django_user.first_name}!\n\n"
        text += f"–í–∞—à –æ–±—â–∏–π –±–∞–ª–∞–Ω—Å: {format_balance(django_user.total_balance)}"

    await message.answer(
        text,
        reply_markup=main_menu_keyboard()
    )


@router.message(Command("balance"))
async def cmd_balance(message: Message, django_user):
    """–ü–æ–∫–∞–∑–∞—Ç—å –±–∞–ª–∞–Ω—Å –∫–æ—à–µ–ª—å–∫–æ–≤"""
    from accounting.models.wallet import Wallet

    wallets = await asyncio.to_thread(
        lambda: list(Wallet.objects.filter(
            user=django_user).select_related('currency'))
    )

    if not wallets:
        await message.answer(
            "üí≥ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∫–æ—à–µ–ª—å–∫–æ–≤.\n"
            "–°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—ã–π –∫–æ—à–µ–ª–µ–∫ –∫–æ–º–∞–Ω–¥–æ–π /wallets"
        )
        return

    text = f"üí∞ <b>–í–∞—à–∏ –∫–æ—à–µ–ª—å–∫–∏:</b>\n\n"
    total_balance = 0

    for wallet in wallets:
        text += f"üí≥ {wallet.title}\n"
        text += f"   –ë–∞–ª–∞–Ω—Å: {format_balance(wallet.balance)} {wallet.currency.char_code}\n"
        if wallet.description:
            text += f"   –û–ø–∏—Å–∞–Ω–∏–µ: {wallet.description}\n"
        text += "\n"
        total_balance += wallet.balance

    text += f"üìä <b>–û–±—â–∏–π –±–∞–ª–∞–Ω—Å: {format_balance(total_balance)}</b>"

    await message.answer(text)


@router.message(Command("income"))
async def cmd_income(message: Message, state: FSMContext):
    """–î–æ–±–∞–≤–∏—Ç—å –¥–æ—Ö–æ–¥"""
    await state.set_state(TransactionStates.waiting_for_amount)
    await state.update_data(transaction_type="IN")

    sent_message = await message.answer(
        "üí∞ <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–æ—Ö–æ–¥–∞</b>\n\n"
        "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–æ—Ö–æ–¥–∞:",
        reply_markup=transaction_type_keyboard()
    )
    await save_message_with_keyboard(sent_message, state)


@router.message(Command("expense"))
async def cmd_expense(message: Message, state: FSMContext):
    """–î–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—Ö–æ–¥"""
    await state.set_state(TransactionStates.waiting_for_amount)
    await state.update_data(transaction_type="EX")

    sent_message = await message.answer(
        "üí∏ <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å—Ö–æ–¥–∞</b>\n\n"
        "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Ä–∞—Å—Ö–æ–¥–∞:",
        reply_markup=transaction_type_keyboard()
    )
    await save_message_with_keyboard(sent_message, state)


@router.message(Command("wallets"))
async def cmd_wallets(message: Message, django_user, state: FSMContext):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ—à–µ–ª—å–∫–∞–º–∏"""
    from accounting.models.wallet import Wallet

    wallets = await asyncio.to_thread(
        lambda: list(Wallet.objects.filter(
            user=django_user).select_related('currency'))
    )

    text = "üí≥ <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ—à–µ–ª—å–∫–∞–º–∏</b>\n\n"

    if wallets:
        text += "–í–∞—à–∏ –∫–æ—à–µ–ª—å–∫–∏:\n"
        for wallet in wallets:
            text += f"‚Ä¢ {wallet.title} - {format_balance(wallet.balance)} {wallet.currency.char_code}\n"
    else:
        text += "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∫–æ—à–µ–ª—å–∫–æ–≤."

    sent_message = await message.answer(
        text,
        reply_markup=wallets_keyboard()
    )
    await save_message_with_keyboard(sent_message, state)


@router.message(Command("categories"))
async def cmd_categories(message: Message, django_user, state: FSMContext):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏"""
    from accounting.models.transactionCategory import TransactionCategoryTree

    categories = await asyncio.to_thread(
        lambda: list(TransactionCategoryTree.objects.filter(user=django_user))
    )

    text = "üìÇ <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏</b>\n\n"

    if categories:
        text += "–í–∞—à–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:\n"
        for category in categories:
            indent = "  " * category.level
            text += f"{indent}‚Ä¢ {category.title}\n"
    else:
        text += "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–π."

    sent_message = await message.answer(
        text,
        reply_markup=categories_keyboard()
    )
    await save_message_with_keyboard(sent_message, state)


@router.message(Command("help"))
async def cmd_help(message: Message):
    """–ü–æ–º–æ—â—å –ø–æ –∫–æ–º–∞–Ω–¥–∞–º"""
    text = "ü§ñ <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n\n"
    text += "/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n"
    text += "/balance - –ü–æ–∫–∞–∑–∞—Ç—å –±–∞–ª–∞–Ω—Å –∫–æ—à–µ–ª—å–∫–æ–≤\n"
    text += "/income - –î–æ–±–∞–≤–∏—Ç—å –¥–æ—Ö–æ–¥\n"
    text += "/expense - –î–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—Ö–æ–¥\n"
    text += "/wallets - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ—à–µ–ª—å–∫–∞–º–∏\n"
    text += "/categories - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏\n"
    text += "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n\n"
    text += "üí° <i>–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ—É–Ω–∫—Ü–∏—è–º</i>"

    await message.answer(text)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ—Å—Ç–æ—è–Ω–∏–π FSM
@router.message(TransactionStates.waiting_for_amount)
async def process_amount(message: Message, state: FSMContext, django_user):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω–æ–π —Å—É–º–º—ã"""
    amount = validate_amount(message.text)

    if amount is None:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—É–º–º—ã! –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ.")
        return

    await state.update_data(amount=amount)
    await state.set_state(TransactionStates.waiting_for_description)

    sent_message = await message.answer(
        "üìù –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:",
        reply_markup=transaction_type_keyboard()
    )
    await save_message_with_keyboard(sent_message, state)


@router.message(TransactionStates.waiting_for_description)
async def process_description(message: Message, state: FSMContext, django_user):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–ø–∏—Å–∞–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏"""
    await state.update_data(description=message.text)
    await state.set_state(TransactionStates.waiting_for_wallet)

    from accounting.models.wallet import Wallet

    wallets = await asyncio.to_thread(
        lambda: list(Wallet.objects.filter(
            user=django_user).select_related('currency'))
    )

    if not wallets:
        await message.answer(
            "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∫–æ—à–µ–ª—å–∫–æ–≤! –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –∫–æ—à–µ–ª–µ–∫ –∫–æ–º–∞–Ω–¥–æ–π /wallets"
        )
        await state.clear()
        return

    text = "üí≥ –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ—à–µ–ª–µ–∫ –¥–ª—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:"
    sent_message = await message.answer(text, reply_markup=wallet_selection_keyboard(wallets))
    await save_message_with_keyboard(sent_message, state)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
@router.message(F.text == "üí∞ –ë–∞–ª–∞–Ω—Å")
async def btn_balance(message: Message, django_user):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –±–∞–ª–∞–Ω—Å"""
    await cmd_balance(message, django_user)


@router.message(F.text == "‚ûï –î–æ—Ö–æ–¥")
async def btn_income(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –¥–æ—Ö–æ–¥"""
    await cmd_income(message, state)


@router.message(F.text == "‚ûñ –†–∞—Å—Ö–æ–¥")
async def btn_expense(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ —Ä–∞—Å—Ö–æ–¥"""
    await cmd_expense(message, state)


@router.message(F.text == "üí≥ –ö–æ—à–µ–ª—å–∫–∏")
async def btn_wallets(message: Message, django_user, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –∫–æ—à–µ–ª—å–∫–∏"""
    await cmd_wallets(message, django_user, state)


@router.message(F.text == "üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏")
async def btn_categories(message: Message, django_user, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    await cmd_categories(message, django_user, state)


@router.message(F.text == "‚ùì –ü–æ–º–æ—â—å")
async def btn_help(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ø–æ–º–æ—â—å"""
    await cmd_help(message)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback-–∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –∫–æ—à–µ–ª—å–∫–æ–≤


@router.callback_query(F.data == "create_wallet")
async def callback_create_wallet(callback: CallbackQuery, state: FSMContext):
    """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∫–æ—à–µ–ª—å–∫–∞"""
    await cleanup_previous_inline_keyboards(callback.message, state)
    await state.set_state(WalletStates.waiting_for_title)
    await callback.message.edit_text(
        "üí≥ <b>–°–æ–∑–¥–∞–Ω–∏–µ –∫–æ—à–µ–ª—å–∫–∞</b>\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ—à–µ–ª—å–∫–∞:",
        reply_markup=None
    )
    await callback.answer()


@router.message(WalletStates.waiting_for_title)
async def process_wallet_title(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–æ—à–µ–ª—å–∫–∞"""
    await state.update_data(title=message.text)
    await state.set_state(WalletStates.waiting_for_description)

    sent_message = await message.answer(
        "üìù –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫–æ—à–µ–ª—å–∫–∞:",
        reply_markup=skip_keyboard()
    )
    await save_message_with_keyboard(sent_message, state)


@router.message(WalletStates.waiting_for_description)
async def process_wallet_description(message: Message, state: FSMContext, django_user):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–ø–∏—Å–∞–Ω–∏—è –∫–æ—à–µ–ª—å–∫–∞"""
    description = message.text if message.text != "-" else ""
    await state.update_data(description=description)
    await state.set_state(WalletStates.waiting_for_currency)

    sent_message = await message.answer(
        "üí± –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É –∫–æ—à–µ–ª—å–∫–∞:",
        reply_markup=currency_selection_keyboard()
    )
    await save_message_with_keyboard(sent_message, state)


@router.callback_query(F.data == "skip_field")
async def callback_skip_field(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å"""
    current_state = await state.get_state()

    if current_state == WalletStates.waiting_for_description:
        await state.update_data(description="")
        await state.set_state(WalletStates.waiting_for_currency)
        await cleanup_previous_inline_keyboards(callback.message, state)
        await callback.message.edit_text(
            "üí± –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É –∫–æ—à–µ–ª—å–∫–∞:",
            reply_markup=currency_selection_keyboard()
        )
    elif current_state == CategoryStates.waiting_for_description:
        await state.update_data(description="")
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        from accounting.models.transactionCategory import \
            TransactionCategoryTree
        from users.models.user import User

        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Django
        django_user = await asyncio.to_thread(
            User.objects.get, telegram_id=callback.from_user.id
        )

        categories = await asyncio.to_thread(
            lambda: list(
                TransactionCategoryTree.objects.filter(user=django_user))
        )

        if categories:
            await state.set_state(CategoryStates.waiting_for_parent)
            await cleanup_previous_inline_keyboards(callback.message, state)
            await callback.message.edit_text(
                "üìÇ –í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
                reply_markup=category_parent_selection_keyboard(categories)
            )
        else:
            # –°–æ–∑–¥–∞–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
            try:
                await create_category(state, django_user, None)
                await cleanup_previous_inline_keyboards(callback.message, state)
                await callback.message.edit_text("‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è —Å–æ–∑–¥–∞–Ω–∞!", reply_markup=None)
                await state.clear()
            except Exception as e:
                logging.error(
                    f"Error creating root category in skip_field: {str(e)}")
                await cleanup_previous_inline_keyboards(callback.message, state)

                if "already exists" in str(e) or "unique constraint" in str(e).lower():
                    error_msg = "‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏—è —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
                else:
                    error_msg = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {str(e)}"

                await callback.message.edit_text(error_msg, reply_markup=None)

    await callback.answer()


@router.callback_query(F.data.startswith("select_currency_"))
async def callback_select_currency(callback: CallbackQuery, state: FSMContext, django_user):
    """–í—ã–±–æ—Ä –≤–∞–ª—é—Ç—ã –¥–ª—è –∫–æ—à–µ–ª—å–∫–∞"""
    currency_code = callback.data.split("_")[-1]

    from accounting.models.currencyCBR import CurrencyCBR
    from accounting.models.wallet import Wallet

    try:
        currency = await asyncio.to_thread(
            CurrencyCBR.objects.get, char_code=currency_code
        )

        data = await state.get_data()

        # –°–æ–∑–¥–∞–µ–º –∫–æ—à–µ–ª–µ–∫
        wallet = await asyncio.to_thread(
            lambda: Wallet.objects.create(
                user=django_user,
                title=data['title'],
                description=data['description'],
                currency=currency
            )
        )

        # –ü–æ–ª—É—á–∞–µ–º –∫–æ—à–µ–ª–µ–∫ —Å –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–π –≤–∞–ª—é—Ç–æ–π –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        wallet = await asyncio.to_thread(
            Wallet.objects.select_related('currency').get, uuid=wallet.uuid
        )

        await cleanup_previous_inline_keyboards(callback.message, state)
        await callback.message.edit_text(
            f"‚úÖ <b>–ö–æ—à–µ–ª–µ–∫ —Å–æ–∑–¥–∞–Ω!</b>\n\n"
            f"üí≥ {wallet.title}\n"
            f"üí∞ –ë–∞–ª–∞–Ω—Å: {format_balance(wallet.balance)} {wallet.currency.char_code}\n"
            f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {wallet.description or '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è'}",
            reply_markup=None
        )

        await state.clear()
        await callback.answer("–ö–æ—à–µ–ª–µ–∫ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!")

    except Exception as e:
        await cleanup_previous_inline_keyboards(callback.message, state)
        await callback.message.edit_text(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–æ—à–µ–ª—å–∫–∞: {str(e)}",
            reply_markup=None
        )
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback-–∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π


@router.callback_query(F.data.startswith("select_wallet_"))
async def callback_select_wallet(callback: CallbackQuery, state: FSMContext, django_user):
    """–í—ã–±–æ—Ä –∫–æ—à–µ–ª—å–∫–∞ –¥–ª—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏"""
    wallet_uuid = callback.data.split("_")[-1]

    from accounting.models.wallet import Wallet

    try:
        wallet = await asyncio.to_thread(
            Wallet.objects.select_related(
                'currency').get, uuid=wallet_uuid, user=django_user
        )

        data = await state.get_data()
        data['wallet_uuid'] = wallet_uuid
        await state.update_data(wallet_uuid=wallet_uuid)

        # –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        from accounting.models.transactionCategory import \
            TransactionCategoryTree
        categories = await asyncio.to_thread(
            lambda: list(
                TransactionCategoryTree.objects.filter(user=django_user))
        )

        if categories:
            await cleanup_previous_inline_keyboards(callback.message, state)
            await state.set_state(TransactionStates.waiting_for_category)
            await callback.message.edit_text(
                f"üìÇ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:",
                reply_markup=category_selection_keyboard(categories)
            )
        else:
            # –°–æ–∑–¥–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –±–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            transaction, updated_wallet = await create_transaction(state, django_user, wallet, None)

            # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
            updated_data = await state.get_data()
            await cleanup_previous_inline_keyboards(callback.message, state)
            await callback.message.edit_text(
                f"‚úÖ <b>–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∞!</b>\n\n"
                f"üí∞ –°—É–º–º–∞: {format_balance(updated_data['amount'])} {updated_wallet.currency.char_code}\n"
                f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {updated_data['description']}\n"
                f"üí≥ –ö–æ—à–µ–ª–µ–∫: {updated_wallet.title}",
                reply_markup=None
            )
            await state.clear()

        await callback.answer()

    except Exception as e:
        await cleanup_previous_inline_keyboards(callback.message, state)
        await callback.message.edit_text(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –∫–æ—à–µ–ª—å–∫–∞: {str(e)}",
            reply_markup=None
        )
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")


@router.callback_query(F.data.startswith("select_category_"))
async def callback_select_category(callback: CallbackQuery, state: FSMContext, django_user):
    """–í—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏"""
    category_uuid = callback.data.split("_")[-1]

    from accounting.models.transactionCategory import TransactionCategoryTree
    from accounting.models.wallet import Wallet

    try:
        category = await asyncio.to_thread(
            TransactionCategoryTree.objects.get, uuid=category_uuid, user=django_user
        )

        data = await state.get_data()

        if 'wallet_uuid' not in data:
            await callback.message.edit_text(
                "‚ùå –û—à–∏–±–∫–∞: –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ—à–µ–ª—å–∫–µ –ø–æ—Ç–µ—Ä—è–Ω–∞. –ù–∞—á–Ω–∏—Ç–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –∑–∞–Ω–æ–≤–æ.",
                reply_markup=None
            )
            await state.clear()
            await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
            return

        wallet = await asyncio.to_thread(
            Wallet.objects.select_related(
                'currency').get, uuid=data['wallet_uuid'], user=django_user
        )

        transaction, updated_wallet = await create_transaction(state, django_user, wallet, category)

        await cleanup_previous_inline_keyboards(callback.message, state)
        await callback.message.edit_text(
            f"‚úÖ <b>–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∞!</b>\n\n"
            f"üí∞ –°—É–º–º–∞: {format_balance(data['amount'])} {updated_wallet.currency.char_code}\n"
            f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {data['description']}\n"
            f"üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category.title}\n"
            f"üí≥ –ö–æ—à–µ–ª–µ–∫: {updated_wallet.title}",
            reply_markup=None
        )

        await state.clear()
        await callback.answer("–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!")

    except Exception as e:
        await cleanup_previous_inline_keyboards(callback.message, state)
        await callback.message.edit_text(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {str(e)}",
            reply_markup=None
        )
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")


@router.callback_query(F.data == "no_category")
async def callback_no_category(callback: CallbackQuery, state: FSMContext, django_user):
    """–°–æ–∑–¥–∞–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –±–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    from accounting.models.wallet import Wallet

    try:
        data = await state.get_data()

        if 'wallet_uuid' not in data:
            await callback.message.edit_text(
                "‚ùå –û—à–∏–±–∫–∞: –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ—à–µ–ª—å–∫–µ –ø–æ—Ç–µ—Ä—è–Ω–∞. –ù–∞—á–Ω–∏—Ç–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –∑–∞–Ω–æ–≤–æ.",
                reply_markup=None
            )
            await state.clear()
            await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
            return

        wallet = await asyncio.to_thread(
            Wallet.objects.select_related(
                'currency').get, uuid=data['wallet_uuid'], user=django_user
        )

        transaction, updated_wallet = await create_transaction(state, django_user, wallet, None)

        await cleanup_previous_inline_keyboards(callback.message, state)
        await callback.message.edit_text(
            f"‚úÖ <b>–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∞!</b>\n\n"
            f"üí∞ –°—É–º–º–∞: {format_balance(data['amount'])} {updated_wallet.currency.char_code}\n"
            f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {data['description']}\n"
            f"üí≥ –ö–æ—à–µ–ª–µ–∫: {updated_wallet.title}",
            reply_markup=None
        )

        await state.clear()
        await callback.answer("–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!")

    except Exception as e:
        await callback.message.edit_text(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: {str(e)}",
            reply_markup=None
        )
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")


@router.callback_query(F.data == "cancel_transaction")
async def callback_cancel_transaction(callback: CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏"""
    await cleanup_previous_inline_keyboards(callback.message, state)
    await state.clear()
    await callback.message.edit_text("‚ùå –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞", reply_markup=None)
    await callback.answer("–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")


@router.callback_query(F.data == "cancel_category")
async def callback_cancel_category(callback: CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    await cleanup_previous_inline_keyboards(callback.message, state)
    await state.clear()
    await callback.message.edit_text("‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=None)
    await callback.answer("–°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback-–∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π


@router.callback_query(F.data == "create_category")
async def callback_create_category(callback: CallbackQuery, state: FSMContext):
    """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    logging.info("Starting category creation process")
    await cleanup_previous_inline_keyboards(callback.message, state)
    await state.set_state(CategoryStates.waiting_for_title)
    await callback.message.edit_text(
        "üìÇ <b>–°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏</b>\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:",
        reply_markup=None
    )
    await callback.answer()


@router.message(CategoryStates.waiting_for_title)
async def process_category_title(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    logging.info(f"Processing category title: {message.text}")
    await state.update_data(title=message.text)
    await state.set_state(CategoryStates.waiting_for_description)

    sent_message = await message.answer(
        "üìù –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:",
        reply_markup=skip_keyboard()
    )
    await save_message_with_keyboard(sent_message, state)


@router.message(CategoryStates.waiting_for_description)
async def process_category_description(message: Message, state: FSMContext, django_user):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–ø–∏—Å–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    description = message.text if message.text != "-" else ""
    logging.info(f"Processing category description: {description}")
    await state.update_data(description=description)

    # –ü–æ–ª—É—á–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–π
    from accounting.models.transactionCategory import TransactionCategoryTree
    categories = await asyncio.to_thread(
        lambda: list(TransactionCategoryTree.objects.filter(user=django_user))
    )

    logging.info(
        f"Found {len(categories)} existing categories for user {django_user}")

    if categories:
        await state.set_state(CategoryStates.waiting_for_parent)
        sent_message = await message.answer(
            "üìÇ –í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
            reply_markup=category_parent_selection_keyboard(categories)
        )
        await save_message_with_keyboard(sent_message, state)
    else:
        # –°–æ–∑–¥–∞–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
        logging.info("No existing categories, creating root category")
        await create_category(state, django_user, None)
        await message.answer("‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è —Å–æ–∑–¥–∞–Ω–∞!")
        await state.clear()


@router.callback_query(F.data == "create_root_category")
async def callback_create_root_category(callback: CallbackQuery, state: FSMContext, django_user):
    """–°–æ–∑–¥–∞–Ω–∏–µ –∫–æ—Ä–Ω–µ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    try:
        await create_category(state, django_user, None)
        await cleanup_previous_inline_keyboards(callback.message, state)
        await callback.message.edit_text("‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è —Å–æ–∑–¥–∞–Ω–∞!", reply_markup=None)
        await state.clear()
        await callback.answer("–ö–∞—Ç–µ–≥–æ—Ä–∏—è —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!")
    except Exception as e:
        logging.error(f"Error in callback_create_root_category: {str(e)}")
        await cleanup_previous_inline_keyboards(callback.message, state)

        # –ë–æ–ª–µ–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        if "already exists" in str(e) or "unique constraint" in str(e).lower():
            error_msg = "‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏—è —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
        else:
            error_msg = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {str(e)}"

        await callback.message.edit_text(error_msg, reply_markup=None)
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")


@router.callback_query(F.data.startswith("select_category_parent_"))
async def callback_select_parent_category(callback: CallbackQuery, state: FSMContext, django_user):
    """–í—ã–±–æ—Ä —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    category_uuid = callback.data.split("_")[-1]

    logging.info(f"Selecting parent category with UUID: {category_uuid}")

    from accounting.models.transactionCategory import TransactionCategoryTree

    try:
        parent_category = await asyncio.to_thread(
            TransactionCategoryTree.objects.get, uuid=category_uuid, user=django_user
        )

        logging.info(f"Found parent category: {parent_category}")

        await create_category(state, django_user, parent_category)

        await cleanup_previous_inline_keyboards(callback.message, state)
        await callback.message.edit_text("‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è —Å–æ–∑–¥–∞–Ω–∞!", reply_markup=None)
        await state.clear()
        await callback.answer("–ö–∞—Ç–µ–≥–æ—Ä–∏—è —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!")

    except Exception as e:
        logging.error(f"Error in callback_select_parent_category: {str(e)}")
        await cleanup_previous_inline_keyboards(callback.message, state)

        # –ë–æ–ª–µ–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        if "already exists" in str(e) or "unique constraint" in str(e).lower():
            error_msg = "‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏—è —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –¥–∞–Ω–Ω–æ–π —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"
        elif "not found" in str(e).lower():
            error_msg = "‚ùå –†–æ–¥–∏—Ç–µ–ª—å—Å–∫–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
        else:
            error_msg = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {str(e)}"

        await callback.message.edit_text(error_msg, reply_markup=None)
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏


async def create_transaction(state: FSMContext, django_user, wallet, category):
    """–°–æ–∑–¥–∞–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏"""
    import logging

    from accounting.models.transaction import Transaction
    from accounting.models.wallet import Wallet

    data = await state.get_data()

    # –õ–æ–≥–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    logging.info(f"Creating transaction: user={django_user.username}, wallet={wallet.title}, "
                 f"type={data['transaction_type']}, amount={data['amount']}, "
                 f"description={data['description']}")

    transaction = await asyncio.to_thread(
        lambda: Transaction.objects.create(
            user=django_user,
            wallet=wallet,
            category=category,
            t_type=data['transaction_type'],
            amount=Decimal(str(data['amount'])),
            description=data['description']
        )
    )

    # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –∫–æ—à–µ–ª—å–∫–∞
    await asyncio.to_thread(
        lambda: wallet.refresh_from_db()
    )

    # –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –±–∞–ª–∞–Ω—Å –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—Å–µ—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
    from django.db.models import Sum
    total_income = await asyncio.to_thread(
        lambda: Transaction.objects.filter(wallet=wallet, t_type='IN').aggregate(
            total=Sum('amount'))['total'] or Decimal('0')
    )
    total_expense = await asyncio.to_thread(
        lambda: Transaction.objects.filter(wallet=wallet, t_type='EX').aggregate(
            total=Sum('amount'))['total'] or Decimal('0')
    )

    new_balance = total_income - total_expense
    await asyncio.to_thread(
        lambda: Wallet.objects.filter(
            uuid=wallet.uuid).update(balance=new_balance)
    )

    # –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—ä–µ–∫—Ç –∫–æ—à–µ–ª—å–∫–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    wallet = await asyncio.to_thread(
        Wallet.objects.select_related('currency').get, uuid=wallet.uuid
    )

    # –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    logging.info(
        f"Transaction created: {transaction.uuid}, wallet balance after: {wallet.balance}")

    return transaction, wallet


async def create_category(state: FSMContext, django_user, parent_category):
    """–°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    from accounting.models.transactionCategory import TransactionCategoryTree

    data = await state.get_data()

    # –õ–æ–≥–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    logging.info(f"Creating category with data: {data}")
    logging.info(f"Parent category: {parent_category}")
    logging.info(f"Django user: {django_user}")

    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å –Ω–∞–∑–≤–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        existing_category = await asyncio.to_thread(
            lambda: TransactionCategoryTree.objects.filter(
                user=django_user,
                title=data['title'],
                parent=parent_category
            ).first()
        )

        if existing_category:
            logging.warning(
                f"Category with title '{data['title']}' already exists for user {django_user}")
            raise ValueError(
                f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º '{data['title']}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")

        category = await asyncio.to_thread(
            lambda: TransactionCategoryTree.objects.create(
                user=django_user,
                parent=parent_category,
                title=data['title'],
                description=data['description']
            )
        )
        logging.info(f"Category created successfully: {category}")
        return category
    except Exception as e:
        logging.error(f"Error creating category: {str(e)}")
        raise


def register_handlers(dp):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤—Å–µ—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤"""
    dp.include_router(router)
