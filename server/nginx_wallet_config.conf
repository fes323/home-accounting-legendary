# Конфигурация nginx для Django Backend + Django Mini App
# Сохраните этот файл как /etc/nginx/sites-available/wallet.my-bucket.ru

# Редирект с www на основной домен (HTTP)
server {
    listen 80;
    server_name www.wallet.my-bucket.ru;

    # Перенаправление с www на основной домен
    return 301 https://wallet.my-bucket.ru$request_uri;
}

# Основной домен (HTTP)
server {
    listen 80;
    server_name wallet.my-bucket.ru;

    # Перенаправление HTTP на HTTPS
    return 301 https://$server_name$request_uri;
}

# Редирект с www на основной домен (HTTPS)
server {
    listen 443 ssl http2;
    server_name www.wallet.my-bucket.ru;

    # SSL конфигурация Let's Encrypt (используем тот же сертификат)
    ssl_certificate /etc/letsencrypt/live/wallet.my-bucket.ru/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/wallet.my-bucket.ru/privkey.pem;

    # SSL настройки безопасности
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384;
    ssl_prefer_server_ciphers off;
    ssl_session_cache shared:SSL:10m;
    ssl_session_timeout 10m;
    ssl_session_tickets off;
    
    # Дополнительные настройки безопасности
    ssl_stapling on;
    ssl_stapling_verify on;
    ssl_trusted_certificate /etc/letsencrypt/live/wallet.my-bucket.ru/chain.pem;

    # Перенаправление с www на основной домен
    return 301 https://wallet.my-bucket.ru$request_uri;
}

# Основной домен (HTTPS)
server {
    listen 443 ssl http2;
    server_name wallet.my-bucket.ru;

    # SSL конфигурация Let's Encrypt
    ssl_certificate /etc/letsencrypt/live/wallet.my-bucket.ru/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/wallet.my-bucket.ru/privkey.pem;

    # SSL настройки безопасности
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384;
    ssl_prefer_server_ciphers off;
    ssl_session_cache shared:SSL:10m;
    ssl_session_timeout 10m;
    ssl_session_tickets off;
    
    # Дополнительные настройки безопасности
    ssl_stapling on;
    ssl_stapling_verify on;
    ssl_trusted_certificate /etc/letsencrypt/live/wallet.my-bucket.ru/chain.pem;

    # Размеры клиентских запросов
    client_max_body_size 20M;

    # Статические файлы Django
    location /static/ {
        alias /var/www/wallet.my-bucket.ru/static/;
        expires 30d;
        add_header Cache-Control "public, immutable";
    }

    # Медиа файлы Django
    location /media/ {
        alias /var/www/wallet.my-bucket.ru/media/;
        expires 30d;
        add_header Cache-Control "public, immutable";
    }

    # API запросы к Django Backend
    location /api/ {
        proxy_pass http://127.0.0.1:8000;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_redirect off;
        
        # CORS заголовки для React приложения
        add_header 'Access-Control-Allow-Origin' '*' always;
        add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS' always;
        add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization' always;
        add_header 'Access-Control-Expose-Headers' 'Content-Length,Content-Range' always;
        
        # Обработка preflight запросов
        if ($request_method = 'OPTIONS') {
            add_header 'Access-Control-Allow-Origin' '*';
            add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS';
            add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization';
            add_header 'Access-Control-Max-Age' 1728000;
            add_header 'Content-Type' 'text/plain; charset=utf-8';
            add_header 'Content-Length' 0;
            return 204;
        }
        
        # Таймауты
        proxy_connect_timeout 30s;
        proxy_send_timeout 30s;
        proxy_read_timeout 30s;
    }

    # Telegram Bot Webhook
    location /telegram/ {
        proxy_pass http://127.0.0.1:8000;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_redirect off;
        
        # Таймауты
        proxy_connect_timeout 30s;
        proxy_send_timeout 30s;
        proxy_read_timeout 30s;
    }

    # Django Admin
    location /admin/ {
        proxy_pass http://127.0.0.1:8000;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_redirect off;
        
        # Таймауты
        proxy_connect_timeout 30s;
        proxy_send_timeout 30s;
        proxy_read_timeout 30s;
    }

    # Django Mini App - все остальные запросы
    location / {
        proxy_pass http://127.0.0.1:8000;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_redirect off;
        
        # Безопасность
        add_header X-Frame-Options "SAMEORIGIN" always;
        add_header X-Content-Type-Options "nosniff" always;
        add_header X-XSS-Protection "1; mode=block" always;
        add_header Referrer-Policy "strict-origin-when-cross-origin" always;
        
        # Таймауты
        proxy_connect_timeout 30s;
        proxy_send_timeout 30s;
        proxy_read_timeout 30s;
    }

    # Логи
    access_log /var/log/nginx/wallet.my-bucket.ru.access.log;
    error_log /var/log/nginx/wallet.my-bucket.ru.error.log;
}

# Инструкции по применению:
# 1. Скопируйте этот файл: sudo cp nginx_wallet_config.conf /etc/nginx/sites-available/wallet.my-bucket.ru
# 2. Создайте символическую ссылку: sudo ln -s /etc/nginx/sites-available/wallet.my-bucket.ru /etc/nginx/sites-enabled/
# 3. Проверьте конфигурацию: sudo nginx -t
# 4. Перезагрузите nginx: sudo systemctl reload nginx
# 5. Проверьте редирект: curl -I http://www.wallet.my-bucket.ru
# 6. Проверьте HTTPS редирект: curl -I https://www.wallet.my-bucket.ru
